// CS2A Language Processing
//
// Description of parser for circuit description language.
// See Lecture Note 12 for further explanation.
//
// This implements the following grammar
//
// Circuit1 -> SEQ Series END | PAR Parallel END | RESISTOR
//
// Series -> Circuit1 Series | empty
// Parallel -> Circuit1 Parallel | empty
//
// The nonterminals Series and Parallel are distinguished so that we can
// give them different semantic actions, each calculating resistance in an
// appropriate manner.
//  java -jar ../CUP/java-cup-11b.jar -dump -destdir src srcjflexcup/newLang.cup 2> dumpfile
// Ian Stark
// Declare terminals and nonterminals in the grammar
terminal SEQ, PAR, END ;
terminal String RESISTOR;
nonterminal Double Circuit, Series, Parallel;
// The value associated to a Circuit1 and a Series block is the resistance; for
// a Parallel block it is the conductance.
// Now the grammar itself
Circuit ::=  SEQ Series:s END {: RESULT = s; :}
            | PAR Parallel:p END {: RESULT = new Double(1/p.doubleValue()); :}
            | RESISTOR:r {: RESULT = new Double(r); :}
;
Series ::= Circuit:c Series:s   {: RESULT = new Double(c.doubleValue()+s.doubleValue()); :}
            | /* empty */ {: RESULT = 0.0; :}
;
Parallel ::= Circuit:c Parallel:p {: RESULT = new Double(1/c.doubleValue()+p.doubleValue()); :}
            | /* empty */ {: RESULT = 0.0; :}
;