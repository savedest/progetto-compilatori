
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import nodi.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\010\005\000\002\010\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\007\000\002\014\005\000\002\014\007" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\011\012\000\002\021\006\000\002\017\002\000\002\017" +
    "\003\000\002\024\003\000\002\024\005\000\002\025\004" +
    "\000\002\025\005\000\002\020\003\000\002\020\003\000" +
    "\002\022\002\000\002\022\004\000\002\023\003\000\002" +
    "\023\004\000\002\027\003\000\002\027\003\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\005\000" +
    "\002\027\004\000\002\027\002\000\002\005\011\000\002" +
    "\007\003\000\002\007\004\000\002\006\007\000\002\030" +
    "\007\000\002\037\002\000\002\037\004\000\002\035\006" +
    "\000\002\031\012\000\002\032\005\000\002\032\004\000" +
    "\002\026\003\000\002\026\005\000\002\033\006\000\002" +
    "\033\006\000\002\034\005\000\002\036\006\000\002\036" +
    "\005\000\002\040\003\000\002\040\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\015" +
    "\004\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\022\004\ufffd\010\013\011\012\012\007\013" +
    "\005\014\015\021\017\023\016\001\002\000\004\067\262" +
    "\001\002\000\006\041\ufff9\067\ufff9\001\002\000\004\002" +
    "\261\001\002\000\006\041\ufff8\067\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\012\012\007\013\005\014" +
    "\015\021\017\023\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\012\012\007\013\005\014\015\021\017\023" +
    "\016\001\002\000\006\041\ufff6\067\ufff6\001\002\000\004" +
    "\067\240\001\002\000\004\004\234\001\002\000\006\041" +
    "\ufff7\067\ufff7\001\002\000\004\067\020\001\002\000\006" +
    "\041\ufff5\067\ufff5\001\002\000\004\037\021\001\002\000" +
    "\020\011\012\012\007\013\005\014\015\021\017\024\026" +
    "\040\uffe6\001\002\000\004\040\037\001\002\000\004\067" +
    "\030\001\002\000\006\007\uffe4\040\uffe4\001\002\000\006" +
    "\007\034\040\uffe5\001\002\000\014\011\012\012\007\013" +
    "\005\014\015\021\017\001\002\000\004\067\030\001\002" +
    "\000\010\006\uffc4\007\uffc4\040\uffc4\001\002\000\010\006" +
    "\032\007\uffe1\040\uffe1\001\002\000\004\067\033\001\002" +
    "\000\014\006\uffc3\007\uffc3\034\uffc3\040\uffc3\044\uffc3\001" +
    "\002\000\016\011\012\012\007\013\005\014\015\021\017" +
    "\024\026\001\002\000\006\007\uffe3\040\uffe3\001\002\000" +
    "\010\006\032\007\uffe2\040\uffe2\001\002\000\004\043\040" +
    "\001\002\000\016\011\012\012\007\013\005\014\015\021" +
    "\017\022\043\001\002\000\004\041\044\001\002\000\004" +
    "\041\uffe0\001\002\000\004\041\uffdf\001\002\000\036\010" +
    "\013\011\012\012\007\013\005\014\015\016\uffde\021\017" +
    "\025\uffde\026\uffde\031\uffde\037\uffde\042\uffde\045\uffde\067" +
    "\uffde\001\002\000\024\002\uffe8\004\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\021\uffe8\023\uffe8\001\002\000" +
    "\022\016\057\025\071\026\061\031\055\037\072\042\uffd0" +
    "\045\056\067\062\001\002\000\036\010\013\011\012\012" +
    "\007\013\005\014\015\016\uffde\021\017\025\uffde\026\uffde" +
    "\031\uffde\037\uffde\042\uffde\045\uffde\067\uffde\001\002\000" +
    "\022\016\uffdd\025\uffdd\026\uffdd\031\uffdd\037\uffdd\042\uffdd" +
    "\045\uffdd\067\uffdd\001\002\000\024\016\uffd9\017\uffd9\025" +
    "\uffd9\026\uffd9\031\uffd9\037\uffd9\042\uffd9\045\uffd9\067\uffd9" +
    "\001\002\000\004\005\233\001\002\000\024\016\uffdc\017" +
    "\uffdc\025\uffdc\026\uffdc\031\uffdc\037\uffdc\042\uffdc\045\uffdc" +
    "\067\uffdc\001\002\000\004\005\232\001\002\000\026\037" +
    "\101\046\100\047\102\051\073\066\107\067\105\070\077" +
    "\071\104\072\074\073\106\001\002\000\030\005\225\037" +
    "\101\046\100\047\102\051\073\066\107\067\105\070\077" +
    "\071\104\072\074\073\106\001\002\000\004\037\207\001" +
    "\002\000\004\005\206\001\002\000\026\037\101\046\100" +
    "\047\102\051\073\066\107\067\105\070\077\071\104\072" +
    "\074\073\106\001\002\000\012\006\uffc4\034\uffc4\037\145" +
    "\044\uffc4\001\002\000\022\016\057\025\071\026\061\031" +
    "\055\037\072\042\176\045\056\067\062\001\002\000\004" +
    "\005\175\001\002\000\010\006\032\034\171\044\172\001" +
    "\002\000\024\016\uffd5\017\uffd5\025\uffd5\026\uffd5\031\uffd5" +
    "\037\uffd5\042\uffd5\045\uffd5\067\uffd5\001\002\000\004\005" +
    "\170\001\002\000\024\016\uffda\017\uffda\025\uffda\026\uffda" +
    "\031\uffda\037\uffda\042\uffda\045\uffda\067\uffda\001\002\000" +
    "\004\067\161\001\002\000\026\037\101\046\100\047\102" +
    "\051\073\066\107\067\105\070\077\071\104\072\074\073" +
    "\106\001\002\000\026\037\101\046\100\047\102\051\073" +
    "\066\107\067\105\070\077\071\104\072\074\073\106\001" +
    "\002\000\050\005\uffb8\006\uffb8\027\uffb8\033\uffb8\040\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\001\002\000\044\005\uffbd\006\156\040\uffbd\050" +
    "\115\051\111\052\122\053\120\054\113\055\123\056\116" +
    "\057\124\060\125\061\117\062\121\063\114\064\112\065" +
    "\126\001\002\000\004\040\153\001\002\000\050\005\uffb7" +
    "\006\uffb7\027\uffb7\033\uffb7\040\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000" +
    "\050\005\uffbb\006\uffbb\027\uffbb\033\uffbb\040\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\001\002\000\026\037\101\046\100\047\102\051\073\066" +
    "\107\067\105\070\077\071\104\072\074\073\106\001\002" +
    "\000\050\005\uffba\006\uffba\027\uffba\033\uffba\040\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\050\005\uffb4\006\uffb4\027\uffb4\033\uffb4" +
    "\040\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\001\002\000\050\005\uffb9\006\uffb9\027" +
    "\uffb9\033\uffb9\040\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\052\005\uffb5" +
    "\006\uffb5\027\uffb5\033\uffb5\037\145\040\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001" +
    "\002\000\050\005\uffb6\006\uffb6\027\uffb6\033\uffb6\040\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\001\002\000\026\037\101\046\100\047\102\051" +
    "\073\066\107\067\105\070\077\071\104\072\074\073\106" +
    "\001\002\000\050\005\uffa4\006\uffa4\027\uffa4\033\uffa4\040" +
    "\uffa4\050\115\051\111\052\122\053\120\054\113\055\123" +
    "\056\116\057\124\060\125\061\117\062\121\063\114\064" +
    "\uffa4\065\uffa4\001\002\000\026\037\101\046\100\047\102" +
    "\051\073\066\107\067\105\070\077\071\104\072\074\073" +
    "\106\001\002\000\026\037\101\046\100\047\102\051\073" +
    "\066\107\067\105\070\077\071\104\072\074\073\106\001" +
    "\002\000\026\037\101\046\100\047\102\051\073\066\107" +
    "\067\105\070\077\071\104\072\074\073\106\001\002\000" +
    "\026\037\101\046\100\047\102\051\073\066\107\067\105" +
    "\070\077\071\104\072\074\073\106\001\002\000\026\037" +
    "\101\046\100\047\102\051\073\066\107\067\105\070\077" +
    "\071\104\072\074\073\106\001\002\000\026\037\101\046" +
    "\100\047\102\051\073\066\107\067\105\070\077\071\104" +
    "\072\074\073\106\001\002\000\026\037\101\046\100\047" +
    "\102\051\073\066\107\067\105\070\077\071\104\072\074" +
    "\073\106\001\002\000\026\037\101\046\100\047\102\051" +
    "\073\066\107\067\105\070\077\071\104\072\074\073\106" +
    "\001\002\000\026\037\101\046\100\047\102\051\073\066" +
    "\107\067\105\070\077\071\104\072\074\073\106\001\002" +
    "\000\026\037\101\046\100\047\102\051\073\066\107\067" +
    "\105\070\077\071\104\072\074\073\106\001\002\000\026" +
    "\037\101\046\100\047\102\051\073\066\107\067\105\070" +
    "\077\071\104\072\074\073\106\001\002\000\026\037\101" +
    "\046\100\047\102\051\073\066\107\067\105\070\077\071" +
    "\104\072\074\073\106\001\002\000\026\037\101\046\100" +
    "\047\102\051\073\066\107\067\105\070\077\071\104\072" +
    "\074\073\106\001\002\000\026\037\101\046\100\047\102" +
    "\051\073\066\107\067\105\070\077\071\104\072\074\073" +
    "\106\001\002\000\050\005\uffac\006\uffac\027\uffac\033\uffac" +
    "\040\uffac\050\115\051\111\052\122\053\120\054\113\055" +
    "\123\056\116\057\124\060\125\061\117\062\121\063\114" +
    "\064\112\065\uffac\001\002\000\050\005\uffa9\006\uffa9\027" +
    "\uffa9\033\uffa9\040\uffa9\050\115\051\111\052\122\053\120" +
    "\054\113\055\123\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\001\002\000\050\005\uffa6" +
    "\006\uffa6\027\uffa6\033\uffa6\040\uffa6\050\115\051\111\052" +
    "\122\053\120\054\113\055\123\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002\000" +
    "\050\005\uffad\006\uffad\027\uffad\033\uffad\040\uffad\050\115" +
    "\051\111\052\122\053\120\054\113\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\001\002\000\050\005\uffb1\006\uffb1\027\uffb1\033\uffb1\040" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\113\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\001\002\000\050\005\uffab\006\uffab\027\uffab" +
    "\033\uffab\040\uffab\050\115\051\111\052\122\053\120\054" +
    "\113\055\123\056\116\057\124\060\125\061\117\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\001\002\000\050\005\uffb0\006" +
    "\uffb0\027\uffb0\033\uffb0\040\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\113\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000\050" +
    "\005\uffa8\006\uffa8\027\uffa8\033\uffa8\040\uffa8\050\115\051" +
    "\111\052\122\053\120\054\113\055\123\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\001" +
    "\002\000\050\005\uffa7\006\uffa7\027\uffa7\033\uffa7\040\uffa7" +
    "\050\115\051\111\052\122\053\120\054\113\055\123\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\001\002\000\050\005\uffb3\006\uffb3\027\uffb3\033" +
    "\uffb3\040\uffb3\050\uffb3\051\uffb3\052\122\053\120\054\113" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\001\002\000\050\005\uffaa\006\uffaa" +
    "\027\uffaa\033\uffaa\040\uffaa\050\115\051\111\052\122\053" +
    "\120\054\113\055\123\056\116\057\124\060\125\061\117" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\001\002\000\050\005" +
    "\uffae\006\uffae\027\uffae\033\uffae\040\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\113\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\001\002" +
    "\000\050\005\uffaf\006\uffaf\027\uffaf\033\uffaf\040\uffaf\050" +
    "\115\051\111\052\122\053\120\054\113\055\123\056\116" +
    "\057\124\060\125\061\117\062\121\063\114\064\uffaf\065" +
    "\uffaf\001\002\000\050\005\uffb2\006\uffb2\027\uffb2\033\uffb2" +
    "\040\uffb2\050\uffb2\051\uffb2\052\122\053\120\054\113\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\001\002\000\030\037\101\040\147\046" +
    "\100\047\102\051\073\066\107\067\105\070\077\071\104" +
    "\072\074\073\106\001\002\000\004\040\150\001\002\000" +
    "\050\005\uffbe\006\uffbe\027\uffbe\033\uffbe\040\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\001\002\000\050\005\uffbf\006\uffbf\027\uffbf\033\uffbf\040" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\001\002\000\040\040\152\050\115\051\111" +
    "\052\122\053\120\054\113\055\123\056\116\057\124\060" +
    "\125\061\117\062\121\063\114\064\112\065\126\001\002" +
    "\000\050\005\uffa3\006\uffa3\027\uffa3\033\uffa3\040\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\001\002\000\006\035\154\036\155\001\002\000\004" +
    "\005\uffc2\001\002\000\004\005\uffc1\001\002\000\026\037" +
    "\101\046\100\047\102\051\073\066\107\067\105\070\077" +
    "\071\104\072\074\073\106\001\002\000\006\005\uffbc\040" +
    "\uffbc\001\002\000\050\005\uffa5\006\uffa5\027\uffa5\033\uffa5" +
    "\040\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\001\002\000\004\044\162\001\002\000" +
    "\004\071\163\001\002\000\004\032\164\001\002\000\004" +
    "\071\165\001\002\000\004\033\166\001\002\000\004\041" +
    "\044\001\002\000\024\016\uffc7\017\uffc7\025\uffc7\026\uffc7" +
    "\031\uffc7\037\uffc7\042\uffc7\045\uffc7\067\uffc7\001\002\000" +
    "\024\016\uffd7\017\uffd7\025\uffd7\026\uffd7\031\uffd7\037\uffd7" +
    "\042\uffd7\045\uffd7\067\uffd7\001\002\000\006\005\uffc5\070" +
    "\174\001\002\000\026\037\101\046\100\047\102\051\073" +
    "\066\107\067\105\070\077\071\104\072\074\073\106\001" +
    "\002\000\004\005\uffc0\001\002\000\004\005\uffc6\001\002" +
    "\000\024\016\uffd4\017\uffd4\025\uffd4\026\uffd4\031\uffd4\037" +
    "\uffd4\042\uffd4\045\uffd4\067\uffd4\001\002\000\050\002\uffe7" +
    "\004\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\023\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\037\uffe7\042\uffe7\045\uffe7\067\uffe7\001\002\000" +
    "\024\016\uffdb\017\uffdb\025\uffdb\026\uffdb\031\uffdb\037\uffdb" +
    "\042\uffdb\045\uffdb\067\uffdb\001\002\000\040\027\201\050" +
    "\115\051\111\052\122\053\120\054\113\055\123\056\116" +
    "\057\124\060\125\061\117\062\121\063\114\064\112\065" +
    "\126\001\002\000\004\041\044\001\002\000\026\016\uffca" +
    "\017\uffca\025\uffca\026\uffca\030\203\031\uffca\037\uffca\042" +
    "\uffca\045\uffca\067\uffca\001\002\000\004\041\044\001\002" +
    "\000\024\016\uffcb\017\uffcb\025\uffcb\026\uffcb\031\uffcb\037" +
    "\uffcb\042\uffcb\045\uffcb\067\uffcb\001\002\000\024\016\uffc9" +
    "\017\uffc9\025\uffc9\026\uffc9\031\uffc9\037\uffc9\042\uffc9\045" +
    "\uffc9\067\uffc9\001\002\000\024\016\uffd3\017\uffd3\025\uffd3" +
    "\026\uffd3\031\uffd3\037\uffd3\042\uffd3\045\uffd3\067\uffd3\001" +
    "\002\000\004\067\210\001\002\000\004\040\211\001\002" +
    "\000\004\071\213\001\002\000\006\020\uffce\071\uffce\001" +
    "\002\000\004\043\220\001\002\000\006\020\216\071\213" +
    "\001\002\000\006\020\uffcd\071\uffcd\001\002\000\004\016" +
    "\217\001\002\000\004\005\uffcf\001\002\000\022\016\057" +
    "\017\uffd0\025\071\026\061\031\055\037\072\045\056\067" +
    "\062\001\002\000\022\016\057\017\222\025\071\026\061" +
    "\031\055\037\072\045\056\067\062\001\002\000\004\005" +
    "\223\001\002\000\006\020\uffcc\071\uffcc\001\002\000\040" +
    "\005\226\050\115\051\111\052\122\053\120\054\113\055" +
    "\123\056\116\057\124\060\125\061\117\062\121\063\114" +
    "\064\112\065\126\001\002\000\024\016\uffd1\017\uffd1\025" +
    "\uffd1\026\uffd1\031\uffd1\037\uffd1\042\uffd1\045\uffd1\067\uffd1" +
    "\001\002\000\024\016\uffd2\017\uffd2\025\uffd2\026\uffd2\031" +
    "\uffd2\037\uffd2\042\uffd2\045\uffd2\067\uffd2\001\002\000\040" +
    "\033\230\050\115\051\111\052\122\053\120\054\113\055" +
    "\123\056\116\057\124\060\125\061\117\062\121\063\114" +
    "\064\112\065\126\001\002\000\004\041\044\001\002\000" +
    "\024\016\uffc8\017\uffc8\025\uffc8\026\uffc8\031\uffc8\037\uffc8" +
    "\042\uffc8\045\uffc8\067\uffc8\001\002\000\024\016\uffd6\017" +
    "\uffd6\025\uffd6\026\uffd6\031\uffd6\037\uffd6\042\uffd6\045\uffd6" +
    "\067\uffd6\001\002\000\024\016\uffd8\017\uffd8\025\uffd8\026" +
    "\uffd8\031\uffd8\037\uffd8\042\uffd8\045\uffd8\067\uffd8\001\002" +
    "\000\004\023\016\001\002\000\022\002\ufffd\010\013\011" +
    "\012\012\007\013\005\014\015\021\017\023\016\001\002" +
    "\000\004\002\001\001\002\000\022\002\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\021\ufffc\023\ufffc\001\002" +
    "\000\004\044\255\001\002\000\006\005\243\006\242\001" +
    "\002\000\004\067\244\001\002\000\044\002\ufffa\004\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\021" +
    "\ufffa\023\ufffa\025\ufffa\026\ufffa\031\ufffa\037\ufffa\042\ufffa" +
    "\045\ufffa\067\ufffa\001\002\000\004\044\245\001\002\000" +
    "\016\046\250\047\251\070\246\071\247\072\252\073\254" +
    "\001\002\000\006\005\uffea\006\uffea\001\002\000\006\005" +
    "\uffee\006\uffee\001\002\000\006\005\uffec\006\uffec\001\002" +
    "\000\006\005\uffeb\006\uffeb\001\002\000\006\005\uffed\006" +
    "\uffed\001\002\000\006\005\uffef\006\uffef\001\002\000\006" +
    "\005\uffe9\006\uffe9\001\002\000\016\046\250\047\251\070" +
    "\246\071\247\072\252\073\254\001\002\000\006\005\ufff0" +
    "\006\ufff0\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\002\000\001\002" +
    "\000\010\005\ufff4\006\ufff4\044\271\001\002\000\006\005" +
    "\265\006\264\001\002\000\004\067\266\001\002\000\044" +
    "\002\ufffb\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\021\ufffb\023\ufffb\025\ufffb\026\ufffb\031\ufffb" +
    "\037\ufffb\042\ufffb\045\ufffb\067\ufffb\001\002\000\010\005" +
    "\ufff3\006\ufff3\044\267\001\002\000\026\037\101\046\100" +
    "\047\102\051\073\066\107\067\105\070\077\071\104\072" +
    "\074\073\106\001\002\000\042\005\ufff1\006\ufff1\050\115" +
    "\051\111\052\122\053\120\054\113\055\123\056\116\057" +
    "\124\060\125\061\117\062\121\063\114\064\112\065\126" +
    "\001\002\000\026\037\101\046\100\047\102\051\073\066" +
    "\107\067\105\070\077\071\104\072\074\073\106\001\002" +
    "\000\042\005\ufff2\006\ufff2\050\115\051\111\052\122\053" +
    "\120\054\113\055\123\056\116\057\124\060\125\061\117" +
    "\062\121\063\114\064\112\065\126\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\014\002\005\003\013\010\010\011\007\012" +
    "\003\001\001\000\004\013\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\257\010" +
    "\010\011\007\012\003\001\001\000\012\003\256\010\010" +
    "\011\007\012\003\001\001\000\002\001\001\000\004\014" +
    "\240\001\001\000\004\004\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\022\017\021\024\024\025\023\001\001\000\002" +
    "\001\001\000\004\026\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\026\001\001\000\004\026\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\022\025\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\041\020\040\001\001\000\004\021\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\046\012" +
    "\003\022\045\001\001\000\002\001\001\000\030\005\063" +
    "\023\062\026\064\027\052\030\067\031\050\032\051\033" +
    "\066\034\053\035\065\036\057\001\001\000\010\010\046" +
    "\012\003\022\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\226\036\102\001\001\000\006\015\223\036" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\177\036\102\001\001\000\002\001\001\000\026\005" +
    "\063\026\064\027\176\030\067\031\050\032\051\033\066" +
    "\034\053\035\065\036\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\074\036\102\040" +
    "\075\001\001\000\006\015\157\036\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\150\036\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\107\036\102" +
    "\001\001\000\002\001\001\000\006\015\143\036\102\001" +
    "\001\000\006\015\142\036\102\001\001\000\006\015\141" +
    "\036\102\001\001\000\006\015\140\036\102\001\001\000" +
    "\006\015\137\036\102\001\001\000\006\015\136\036\102" +
    "\001\001\000\006\015\135\036\102\001\001\000\006\015" +
    "\134\036\102\001\001\000\006\015\133\036\102\001\001" +
    "\000\006\015\132\036\102\001\001\000\006\015\131\036" +
    "\102\001\001\000\006\015\130\036\102\001\001\000\006" +
    "\015\127\036\102\001\001\000\006\015\126\036\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\074\036\102\040\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\074\036" +
    "\102\040\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\074\036\102\040\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\201\001\001" +
    "\000\004\037\203\001\001\000\004\021\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\211\007\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\063\023\220\026\064\027\052\030\067" +
    "\031\050\032\051\033\066\034\053\035\065\036\057\001" +
    "\001\000\026\005\063\026\064\027\176\030\067\031\050" +
    "\032\051\033\066\034\053\035\065\036\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\236\001\001\000\012\003\235\010" +
    "\010\011\007\012\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\267\036\102" +
    "\001\001\000\002\001\001\000\006\015\271\036\102\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramRoot("Program",(ArrayList<Node>)declList,(MainFunDecl)mainFun,(ArrayList<Node>)declList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (VarDecl)varDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (FunDecl)funDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<Node> list = new ArrayList<Node>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MainFunDecl("MainFunDecl",(FunDecl)funDecl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("VarDecl",(String)type, (ArrayList<IDInit>)idInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("VarDeclObb", (ArrayList<IDInitObb>)idInitObb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;
		RESULT = "BOOL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT =null;
		RESULT = "REAL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),null));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),null)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),(ExprNode)expr));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),(ExprNode)expr)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IDInitObb> idListObb = new ArrayList<IDInitObb>(); idListObb.add(0, new IDInitObb(new IdVal(id),(Const)cost));RESULT = idListObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInitObb>)idInitObb).add(0, new IDInitObb(new IdVal(id),(Const)cost)); RESULT = idInitObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new Const("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new Const("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object paramDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeorvoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeorvoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeorvoid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunDecl("FunDecl", new IdVal(id),(ArrayList<ParDecl>)paramDecl,(String)typeorvoid,(Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body("bodyOp",(ArrayList<VarDecl>)varDeclList, (ArrayList<Stat>)statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>(); list.add((ParDecl)parDecl); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ParDecl>)nonEmptyList).add(0, (ParDecl)parDecl); RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= OUT Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOutOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              Object RESULT =null;
		RESULT = "VOID";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<VarDecl> list = new ArrayList<VarDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarDecl>)varDeclList).add(0, (VarDecl)varDecl); RESULT = varDeclList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Stat> statList = new ArrayList<Stat>(); statList.add(0, (Stat)stat);RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= StatList Stat 
            {
              Object RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Stat>)statList).add(0, (Stat)stat); RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Object RESULT =null;
		int ifValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((IfStat)ifVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Object RESULT =null;
		int forValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat( (ForStat)forVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat((ReadStat) readVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (WriteStat)writeVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (AssignStat)assignVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Object RESULT =null;
		int whileValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((WhileStat)whileVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= Switch1 SEMI 
            {
              Object RESULT =null;
		int switchValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int switchValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object switchVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (SwitchNode)switchVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int funCallValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funCallVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (FuncallNode)funCallVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( "return",(ExprNode)exprVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Object RESULT =null;
		RESULT = new Stat( "returnVoid",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Switch1 ::= SWITCH LPAR ID RPAR CaseList END SWITCH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object caselist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SwitchNode("SwitchStat",new IdVal(id),(ArrayList<CaseNode>)caselist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Switch1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CaseList ::= Case1 
            {
              Object RESULT =null;
		int case1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object case1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<CaseNode> caseList = new ArrayList<CaseNode>(); caseList.add(0, (CaseNode)case1);RESULT = caseList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CaseList ::= CaseList Case1 
            {
              Object RESULT =null;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object caselist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object case1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<CaseNode>)caselist).add(0, (CaseNode)case1); RESULT = caselist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Case1 ::= INTEGER_CONST COLON StatList STOP SEMI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CaseNode(new IntegerConst(val),(ArrayList<Stat>)statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IfStat ::= IF Expr THEN Body Else 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStat("IfStat", (ExprNode)expr, (Body)body, (ElseStat)els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Else ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseStat("ElseStat", (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WhileStat ::= WHILE Expr LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStat("WhileState", (ExprNode)expr, (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStat("ForStat",new IdVal(id), new IntegerConst(val), new IntegerConst(val2), (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ReadStat ::= IdList READ STRING_CONST 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReadStat ::= IdList READ 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IdList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdVal> list = new ArrayList<IdVal>(); list.add(new IdVal(id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IdVal>)idList).add(new IdVal(id)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStat ("WriteOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat("WritelnOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AssignStat ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStat("AssignOp",(ArrayList<IdVal>)idList,(ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunCall ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id), (ArrayList<ExprNode>)exprlist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> list = new ArrayList<ExprNode>(); list.add(0, (ExprNode)expr); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>)exprList).add(0, (ExprNode)expr); RESULT = exprList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("ID", new IdVal(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("FuncallOp",  (FuncallNode)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AddOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MinusOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MulOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DivOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AndOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("PowOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("StrConcatOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("OrOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("EqOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("UminusOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NotOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprNode("InparOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
