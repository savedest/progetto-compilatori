
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import nodi.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\005\000\002\002\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\002\000\002\007\004" +
    "\000\002\011\005\000\002\011\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\007\000\002\015\005\000\002\015\007" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\012\012\000\002\022\006\000\002\020\002\000\002\020" +
    "\003\000\002\025\003\000\002\025\005\000\002\026\004" +
    "\000\002\026\005\000\002\021\003\000\002\021\003\000" +
    "\002\023\002\000\002\023\004\000\002\024\003\000\002" +
    "\024\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\003" +
    "\000\002\030\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\004\000\002\030\002\000\002" +
    "\031\007\000\002\010\023\000\002\003\003\000\002\003" +
    "\002\000\002\004\003\000\002\004\005\000\002\004\002" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\042\010\000\002\040\002\000\002\040\004\000\002" +
    "\036\006\000\002\032\012\000\002\033\005\000\002\033" +
    "\004\000\002\027\003\000\002\027\005\000\002\034\006" +
    "\000\002\034\006\000\002\035\005\000\002\037\006\000" +
    "\002\037\005\000\002\041\003\000\002\041\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\004\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\022\004\ufffd\013\013\014\012\015\007\016" +
    "\005\017\015\021\017\023\016\001\002\000\004\072\232" +
    "\001\002\000\006\044\ufff9\072\ufff9\001\002\000\004\002" +
    "\313\001\002\000\006\044\ufff8\072\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\013\013\014\012\015\007\016\005\017" +
    "\015\021\017\023\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\013\013\014\012\015\007\016\005\017\015\021\017\023" +
    "\016\001\002\000\006\044\ufff6\072\ufff6\001\002\000\004" +
    "\072\242\001\002\000\004\004\303\001\002\000\006\044" +
    "\ufff7\072\ufff7\001\002\000\004\072\020\001\002\000\006" +
    "\044\ufff5\072\ufff5\001\002\000\004\042\021\001\002\000" +
    "\020\014\012\015\007\016\005\017\015\021\017\024\026" +
    "\043\uffe6\001\002\000\004\043\037\001\002\000\004\072" +
    "\030\001\002\000\006\012\uffe4\043\uffe4\001\002\000\006" +
    "\012\034\043\uffe5\001\002\000\014\014\012\015\007\016" +
    "\005\017\015\021\017\001\002\000\004\072\030\001\002" +
    "\000\010\011\uffbd\012\uffbd\043\uffbd\001\002\000\010\011" +
    "\032\012\uffe1\043\uffe1\001\002\000\004\072\033\001\002" +
    "\000\014\011\uffbc\012\uffbc\037\uffbc\043\uffbc\047\uffbc\001" +
    "\002\000\016\014\012\015\007\016\005\017\015\021\017" +
    "\024\026\001\002\000\006\012\uffe3\043\uffe3\001\002\000" +
    "\010\011\032\012\uffe2\043\uffe2\001\002\000\004\046\040" +
    "\001\002\000\016\014\012\015\007\016\005\017\015\021" +
    "\017\022\043\001\002\000\004\044\044\001\002\000\004" +
    "\044\uffe0\001\002\000\004\044\uffdf\001\002\000\040\006" +
    "\uffde\013\013\014\012\015\007\016\005\017\015\021\017" +
    "\025\uffde\026\uffde\027\uffde\034\uffde\042\uffde\045\uffde\050" +
    "\uffde\072\uffde\001\002\000\024\002\uffe8\004\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\023\uffe8\001" +
    "\002\000\024\006\055\025\073\026\063\027\071\034\057" +
    "\042\074\045\uffcf\050\060\072\064\001\002\000\042\006" +
    "\uffde\013\013\014\012\015\007\016\005\017\015\021\017" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\034\uffde\042\uffde\045" +
    "\uffde\050\uffde\072\uffde\001\002\000\026\006\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\034\uffdd\042\uffdd\045\uffdd\050" +
    "\uffdd\072\uffdd\001\002\000\026\006\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\034\uffd9\042\uffd9\045\uffd9\050\uffd9\072" +
    "\uffd9\001\002\000\004\010\302\001\002\000\026\006\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\031\uffd2\034\uffd2\042\uffd2\045" +
    "\uffd2\050\uffd2\072\uffd2\001\002\000\026\006\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\031\uffdc\034\uffdc\042\uffdc\045\uffdc\050" +
    "\uffdc\072\uffdc\001\002\000\004\042\226\001\002\000\004" +
    "\010\225\001\002\000\026\042\103\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\030\010\220\042\103\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\026\006\uffd3\025\uffd3\026\uffd3\027\uffd3\031" +
    "\uffd3\034\uffd3\042\uffd3\045\uffd3\050\uffd3\072\uffd3\001\002" +
    "\000\004\010\216\001\002\000\026\042\103\051\102\052" +
    "\104\054\075\071\113\072\110\073\101\074\107\075\076" +
    "\076\111\001\002\000\012\011\uffbd\037\uffbd\042\153\047" +
    "\uffbd\001\002\000\024\006\055\025\073\026\063\027\071" +
    "\034\057\042\074\045\207\050\060\072\064\001\002\000" +
    "\010\011\032\037\205\047\151\001\002\000\026\006\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\031\uffd5\034\uffd5\042\uffd5\045" +
    "\uffd5\050\uffd5\072\uffd5\001\002\000\004\010\204\001\002" +
    "\000\020\013\013\014\012\015\007\016\005\017\015\021" +
    "\017\030\uffde\001\002\000\026\006\uffda\025\uffda\026\uffda" +
    "\027\uffda\031\uffda\034\uffda\042\uffda\045\uffda\050\uffda\072" +
    "\uffda\001\002\000\004\072\167\001\002\000\026\042\103" +
    "\051\102\052\104\054\075\071\113\072\110\073\101\074" +
    "\107\075\076\076\111\001\002\000\026\042\103\051\102" +
    "\052\104\054\075\071\113\072\110\073\101\074\107\075" +
    "\076\076\111\001\002\000\050\010\uffb1\011\uffb1\032\uffb1" +
    "\036\uffb1\043\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\001\002\000\050\010\uffb6\011" +
    "\164\032\uffb6\036\uffb6\043\uffb6\053\122\054\115\055\126" +
    "\056\124\057\117\060\127\061\121\062\130\063\131\064" +
    "\123\065\125\066\120\067\116\070\132\001\002\000\004" +
    "\043\161\001\002\000\050\010\uffb0\011\uffb0\032\uffb0\036" +
    "\uffb0\043\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\001\002\000\050\010\uffb4\011\uffb4" +
    "\032\uffb4\036\uffb4\043\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000\026\042" +
    "\103\051\102\052\104\054\075\071\113\072\110\073\101" +
    "\074\107\075\076\076\111\001\002\000\050\010\uffb3\011" +
    "\uffb3\032\uffb3\036\uffb3\043\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\001\002\000\050" +
    "\010\uffac\011\uffac\032\uffac\036\uffac\043\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\001" +
    "\002\000\050\010\uffad\011\uffad\032\uffad\036\uffad\043\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\001\002\000\050\010\uffb2\011\uffb2\032\uffb2\036" +
    "\uffb2\043\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\001\002\000\054\010\uffae\011\uffbd" +
    "\032\uffae\036\uffae\042\153\043\uffae\047\uffbd\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\001" +
    "\002\000\050\010\uffaf\011\uffaf\032\uffaf\036\uffaf\043\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\001\002\000\006\011\032\047\151\001\002\000" +
    "\026\042\103\051\102\052\104\054\075\071\113\072\110" +
    "\073\101\074\107\075\076\076\111\001\002\000\050\010" +
    "\uff9c\011\uff9c\032\uff9c\036\uff9c\043\uff9c\053\122\054\115" +
    "\055\126\056\124\057\117\060\127\061\121\062\130\063" +
    "\131\064\123\065\125\066\120\067\uff9c\070\uff9c\001\002" +
    "\000\026\042\103\051\102\052\104\054\075\071\113\072" +
    "\110\073\101\074\107\075\076\076\111\001\002\000\026" +
    "\042\103\051\102\052\104\054\075\071\113\072\110\073" +
    "\101\074\107\075\076\076\111\001\002\000\026\042\103" +
    "\051\102\052\104\054\075\071\113\072\110\073\101\074" +
    "\107\075\076\076\111\001\002\000\026\042\103\051\102" +
    "\052\104\054\075\071\113\072\110\073\101\074\107\075" +
    "\076\076\111\001\002\000\026\042\103\051\102\052\104" +
    "\054\075\071\113\072\110\073\101\074\107\075\076\076" +
    "\111\001\002\000\026\042\103\051\102\052\104\054\075" +
    "\071\113\072\110\073\101\074\107\075\076\076\111\001" +
    "\002\000\026\042\103\051\102\052\104\054\075\071\113" +
    "\072\110\073\101\074\107\075\076\076\111\001\002\000" +
    "\026\042\103\051\102\052\104\054\075\071\113\072\110" +
    "\073\101\074\107\075\076\076\111\001\002\000\026\042" +
    "\103\051\102\052\104\054\075\071\113\072\110\073\101" +
    "\074\107\075\076\076\111\001\002\000\026\042\103\051" +
    "\102\052\104\054\075\071\113\072\110\073\101\074\107" +
    "\075\076\076\111\001\002\000\026\042\103\051\102\052" +
    "\104\054\075\071\113\072\110\073\101\074\107\075\076" +
    "\076\111\001\002\000\026\042\103\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\026\042\103\051\102\052\104\054\075\071" +
    "\113\072\110\073\101\074\107\075\076\076\111\001\002" +
    "\000\026\042\103\051\102\052\104\054\075\071\113\072" +
    "\110\073\101\074\107\075\076\076\111\001\002\000\050" +
    "\010\uffa4\011\uffa4\032\uffa4\036\uffa4\043\uffa4\053\122\054" +
    "\115\055\126\056\124\057\117\060\127\061\121\062\130" +
    "\063\131\064\123\065\125\066\120\067\116\070\uffa4\001" +
    "\002\000\050\010\uffa1\011\uffa1\032\uffa1\036\uffa1\043\uffa1" +
    "\053\122\054\115\055\126\056\124\057\117\060\127\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\001\002\000\050\010\uff9e\011\uff9e\032\uff9e\036" +
    "\uff9e\043\uff9e\053\122\054\115\055\126\056\124\057\117" +
    "\060\127\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\001\002\000\050\010\uffa5\011\uffa5" +
    "\032\uffa5\036\uffa5\043\uffa5\053\122\054\115\055\126\056" +
    "\124\057\117\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001\002\000\050\010" +
    "\uffa9\011\uffa9\032\uffa9\036\uffa9\043\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\117\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002" +
    "\000\050\010\uffa3\011\uffa3\032\uffa3\036\uffa3\043\uffa3\053" +
    "\122\054\115\055\126\056\124\057\117\060\127\061\121" +
    "\062\130\063\131\064\123\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\001\002\000\050\010\uffa8\011\uffa8\032\uffa8\036\uffa8" +
    "\043\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\117\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\001\002\000\050\010\uffa0\011\uffa0\032" +
    "\uffa0\036\uffa0\043\uffa0\053\122\054\115\055\126\056\124" +
    "\057\117\060\127\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\001\002\000\050\010\uffab" +
    "\011\uffab\032\uffab\036\uffab\043\uffab\053\uffab\054\uffab\055" +
    "\126\056\124\057\117\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\001\002\000" +
    "\050\010\uff9f\011\uff9f\032\uff9f\036\uff9f\043\uff9f\053\122" +
    "\054\115\055\126\056\124\057\117\060\127\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\001\002\000\050\010\uffa2\011\uffa2\032\uffa2\036\uffa2\043" +
    "\uffa2\053\122\054\115\055\126\056\124\057\117\060\127" +
    "\061\121\062\130\063\131\064\123\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\001\002\000\050\010\uffa6\011\uffa6\032\uffa6" +
    "\036\uffa6\043\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\117\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\001\002\000\050\010\uffa7\011" +
    "\uffa7\032\uffa7\036\uffa7\043\uffa7\053\122\054\115\055\126" +
    "\056\124\057\117\060\127\061\121\062\130\063\131\064" +
    "\123\065\125\066\120\067\uffa7\070\uffa7\001\002\000\050" +
    "\010\uffaa\011\uffaa\032\uffaa\036\uffaa\043\uffaa\053\uffaa\054" +
    "\uffaa\055\126\056\124\057\117\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\001" +
    "\002\000\026\042\103\051\102\052\104\054\075\071\113" +
    "\072\110\073\101\074\107\075\076\076\111\001\002\000" +
    "\050\010\uffb9\011\uffb9\032\uffb9\036\uffb9\043\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\001\002\000\030\042\103\043\155\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\004\043\156\001\002\000\050\010\uffb7\011" +
    "\uffb7\032\uffb7\036\uffb7\043\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\001\002\000\050" +
    "\010\uffb8\011\uffb8\032\uffb8\036\uffb8\043\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\001" +
    "\002\000\040\043\160\053\122\054\115\055\126\056\124" +
    "\057\117\060\127\061\121\062\130\063\131\064\123\065" +
    "\125\066\120\067\116\070\132\001\002\000\050\010\uff9b" +
    "\011\uff9b\032\uff9b\036\uff9b\043\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\001\002\000" +
    "\006\040\162\041\163\001\002\000\004\010\uffbb\001\002" +
    "\000\004\010\uffba\001\002\000\026\042\103\051\102\052" +
    "\104\054\075\071\113\072\110\073\101\074\107\075\076" +
    "\076\111\001\002\000\050\010\uffb5\011\uffb5\032\uffb5\036" +
    "\uffb5\043\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\001\002\000\050\010\uff9d\011\uff9d" +
    "\032\uff9d\036\uff9d\043\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\uff9d\001\002\000\004\047" +
    "\170\001\002\000\004\074\171\001\002\000\004\035\172" +
    "\001\002\000\004\074\173\001\002\000\004\036\174\001" +
    "\002\000\004\044\044\001\002\000\026\006\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\031\uffc0\034\uffc0\042\uffc0\045\uffc0\050" +
    "\uffc0\072\uffc0\001\002\000\004\030\177\001\002\000\024" +
    "\006\055\025\073\026\063\027\071\031\uffcf\034\057\042" +
    "\074\050\060\072\064\001\002\000\024\006\055\025\073" +
    "\026\063\027\071\031\202\034\057\042\074\050\060\072" +
    "\064\001\002\000\026\006\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\031\uffdb\034\uffdb\042\uffdb\045\uffdb\050\uffdb\072\uffdb\001" +
    "\002\000\004\027\203\001\002\000\026\006\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\031\uffc4\034\uffc4\042\uffc4\045\uffc4\050" +
    "\uffc4\072\uffc4\001\002\000\026\006\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\031\uffd7\034\uffd7\042\uffd7\045\uffd7\050\uffd7\072" +
    "\uffd7\001\002\000\006\010\uffbe\073\206\001\002\000\004" +
    "\010\uffbf\001\002\000\052\002\uffe7\004\uffe7\006\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\023\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\042" +
    "\uffe7\045\uffe7\050\uffe7\072\uffe7\001\002\000\040\032\211" +
    "\053\122\054\115\055\126\056\124\057\117\060\127\061" +
    "\121\062\130\063\131\064\123\065\125\066\120\067\116" +
    "\070\132\001\002\000\004\044\044\001\002\000\030\006" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\033\213\034\uffc3" +
    "\042\uffc3\045\uffc3\050\uffc3\072\uffc3\001\002\000\004\044" +
    "\044\001\002\000\026\006\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\uffce\034\uffce\042\uffce\045\uffce\050\uffce\072\uffce\001" +
    "\002\000\026\006\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2" +
    "\034\uffc2\042\uffc2\045\uffc2\050\uffc2\072\uffc2\001\002\000" +
    "\026\006\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\034\uffd4" +
    "\042\uffd4\045\uffd4\050\uffd4\072\uffd4\001\002\000\040\010" +
    "\221\053\122\054\115\055\126\056\124\057\117\060\127" +
    "\061\121\062\130\063\131\064\123\065\125\066\120\067" +
    "\116\070\132\001\002\000\026\006\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\034\uffd0\042\uffd0\045\uffd0\050\uffd0\072" +
    "\uffd0\001\002\000\026\006\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\031\uffd1\034\uffd1\042\uffd1\045\uffd1\050\uffd1\072\uffd1\001" +
    "\002\000\040\036\223\053\122\054\115\055\126\056\124" +
    "\057\117\060\127\061\121\062\130\063\131\064\123\065" +
    "\125\066\120\067\116\070\132\001\002\000\004\044\044" +
    "\001\002\000\026\006\uffc1\025\uffc1\026\uffc1\027\uffc1\031" +
    "\uffc1\034\uffc1\042\uffc1\045\uffc1\050\uffc1\072\uffc1\001\002" +
    "\000\026\006\uffd6\025\uffd6\026\uffd6\027\uffd6\031\uffd6\034" +
    "\uffd6\042\uffd6\045\uffd6\050\uffd6\072\uffd6\001\002\000\020" +
    "\013\230\014\012\015\007\016\005\017\015\021\017\043" +
    "\uffc5\001\002\000\004\043\260\001\002\000\004\072\242" +
    "\001\002\000\004\072\232\001\002\000\012\010\ufff4\011" +
    "\ufff4\043\ufff4\047\240\001\002\000\006\011\234\043\uffc7" +
    "\001\002\000\004\072\235\001\002\000\012\010\ufff3\011" +
    "\ufff3\043\ufff3\047\236\001\002\000\026\042\103\051\102" +
    "\052\104\054\075\071\113\072\110\073\101\074\107\075" +
    "\076\076\111\001\002\000\044\010\ufff1\011\ufff1\043\ufff1" +
    "\053\122\054\115\055\126\056\124\057\117\060\127\061" +
    "\121\062\130\063\131\064\123\065\125\066\120\067\116" +
    "\070\132\001\002\000\026\042\103\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\044\010\ufff2\011\ufff2\043\ufff2\053\122\054" +
    "\115\055\126\056\124\057\117\060\127\061\121\062\130" +
    "\063\131\064\123\065\125\066\120\067\116\070\132\001" +
    "\002\000\004\047\256\001\002\000\006\011\244\043\uffc6" +
    "\001\002\000\004\072\245\001\002\000\004\047\246\001" +
    "\002\000\016\051\251\052\252\073\247\074\250\075\253" +
    "\076\255\001\002\000\010\010\uffea\011\uffea\043\uffea\001" +
    "\002\000\010\010\uffee\011\uffee\043\uffee\001\002\000\010" +
    "\010\uffec\011\uffec\043\uffec\001\002\000\010\010\uffeb\011" +
    "\uffeb\043\uffeb\001\002\000\010\010\uffed\011\uffed\043\uffed" +
    "\001\002\000\010\010\uffef\011\uffef\043\uffef\001\002\000" +
    "\010\010\uffe9\011\uffe9\043\uffe9\001\002\000\016\051\251" +
    "\052\252\073\247\074\250\075\253\076\255\001\002\000" +
    "\010\010\ufff0\011\ufff0\043\ufff0\001\002\000\004\005\261" +
    "\001\002\000\004\044\262\001\002\000\024\006\055\025" +
    "\073\026\063\027\071\034\057\042\074\045\uffcf\050\060" +
    "\072\064\001\002\000\024\006\055\025\073\026\063\027" +
    "\071\034\057\042\074\045\264\050\060\072\064\001\002" +
    "\000\004\025\265\001\002\000\004\042\266\001\002\000" +
    "\030\042\103\043\uffcb\051\102\052\104\054\075\071\113" +
    "\072\110\073\101\074\107\075\076\076\111\001\002\000" +
    "\004\043\271\001\002\000\040\043\uffcc\053\122\054\115" +
    "\055\126\056\124\057\117\060\127\061\121\062\130\063" +
    "\131\064\123\065\125\066\120\067\116\070\132\001\002" +
    "\000\004\007\272\001\002\000\004\042\273\001\002\000" +
    "\030\042\103\043\uffc8\051\102\052\104\054\075\071\113" +
    "\072\110\073\101\074\107\075\076\076\111\001\002\000" +
    "\004\043\300\001\002\000\042\010\276\043\uffca\053\122" +
    "\054\115\055\126\056\124\057\117\060\127\061\121\062" +
    "\130\063\131\064\123\065\125\066\120\067\116\070\132" +
    "\001\002\000\030\042\103\043\uffc8\051\102\052\104\054" +
    "\075\071\113\072\110\073\101\074\107\075\076\076\111" +
    "\001\002\000\004\043\uffc9\001\002\000\004\010\301\001" +
    "\002\000\026\006\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd" +
    "\034\uffcd\042\uffcd\045\uffcd\050\uffcd\072\uffcd\001\002\000" +
    "\026\006\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\034\uffd8" +
    "\042\uffd8\045\uffd8\050\uffd8\072\uffd8\001\002\000\004\023" +
    "\016\001\002\000\022\002\ufffd\013\013\014\012\015\007" +
    "\016\005\017\015\021\017\023\016\001\002\000\004\002" +
    "\001\001\002\000\022\002\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\021\ufffc\023\ufffc\001\002\000\006\010" +
    "\310\011\244\001\002\000\050\002\ufffa\004\ufffa\006\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\023" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\034\ufffa\042\ufffa" +
    "\045\ufffa\050\ufffa\072\ufffa\001\002\000\006\002\uffff\004" +
    "\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002\000\004" +
    "\002\000\001\002\000\006\010\315\011\234\001\002\000" +
    "\050\002\ufffb\004\ufffb\006\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\021\ufffb\023\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\034\ufffb\042\ufffb\045\ufffb\050\ufffb\072\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\014\002\005\006\013\011\010\012\007\013" +
    "\003\001\001\000\004\014\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\311\011" +
    "\010\012\007\013\003\001\001\000\012\006\310\011\010" +
    "\012\007\013\003\001\001\000\002\001\001\000\004\015" +
    "\306\001\001\000\004\007\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\022\020\021\025\024\026\023\001\001\000\002" +
    "\001\001\000\004\027\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\026\001\001\000\004\027\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\022\026\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\041\021\040\001\001\000\004\022\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\046\013" +
    "\003\023\045\001\001\000\002\001\001\000\032\010\052" +
    "\024\064\027\065\030\053\031\071\032\050\033\051\034" +
    "\067\035\055\036\066\037\061\042\060\001\001\000\010" +
    "\011\046\013\003\023\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\221\027\111\035\104\037\105\001\001\000\012\016\216" +
    "\027\111\035\104\037\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\207\027\111\035\104\037\105" +
    "\001\001\000\002\001\001\000\030\010\052\027\065\030" +
    "\200\031\071\032\050\033\051\034\067\035\055\036\066" +
    "\037\061\042\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\046\013\003\023\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\076\027\111\035\104\037\105\041\077\001\001\000\012" +
    "\016\165\027\111\035\104\037\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\156\027\111\035\104\037" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\113\027\111\035\104" +
    "\037\105\001\001\000\002\001\001\000\012\016\147\027" +
    "\111\035\104\037\105\001\001\000\012\016\146\027\111" +
    "\035\104\037\105\001\001\000\012\016\145\027\111\035" +
    "\104\037\105\001\001\000\012\016\144\027\111\035\104" +
    "\037\105\001\001\000\012\016\143\027\111\035\104\037" +
    "\105\001\001\000\012\016\142\027\111\035\104\037\105" +
    "\001\001\000\012\016\141\027\111\035\104\037\105\001" +
    "\001\000\012\016\140\027\111\035\104\037\105\001\001" +
    "\000\012\016\137\027\111\035\104\037\105\001\001\000" +
    "\012\016\136\027\111\035\104\037\105\001\001\000\012" +
    "\016\135\027\111\035\104\037\105\001\001\000\012\016" +
    "\134\027\111\035\104\037\105\001\001\000\012\016\133" +
    "\027\111\035\104\037\105\001\001\000\012\016\132\027" +
    "\111\035\104\037\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\076\027\111\035\104\037\105\041\151\001\001\000" +
    "\002\001\001\000\014\016\076\027\111\035\104\037\105" +
    "\041\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\076\027\111\035\104\037\105\041\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\052\024\177\027\065\030\053\031\071" +
    "\032\050\033\051\034\067\035\055\036\066\037\061\042" +
    "\060\001\001\000\030\010\052\027\065\030\200\031\071" +
    "\032\050\033\051\034\067\035\055\036\066\037\061\042" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\211" +
    "\001\001\000\004\040\213\001\001\000\004\022\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\226\013\230\001\001\000" +
    "\002\001\001\000\004\015\242\001\001\000\004\014\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\236\027\111\035\104" +
    "\037\105\001\001\000\002\001\001\000\012\016\240\027" +
    "\111\035\104\037\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\052\024\262\027\065\030\053\031\071" +
    "\032\050\033\051\034\067\035\055\036\066\037\061\042" +
    "\060\001\001\000\030\010\052\027\065\030\200\031\071" +
    "\032\050\033\051\034\067\035\055\036\066\037\061\042" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\266\016\267\027\111\035\104\037\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\273\016\274\027\111\035\104\037" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\276\016\274\027\111\035\104\037\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\305\001\001\000\012\006\304\011" +
    "\010\012\007\013\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramRoot("Program",(ArrayList<Node>)declList,(MainFunDecl)mainFun,(ArrayList<Node>)declList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (VarDecl)varDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (FunDecl)funDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<Node> list = new ArrayList<Node>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MainFunDecl("MainFunDecl",(FunDecl)funDecl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("VarDecl",(String)type, (ArrayList<IDInit>)idInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("VarDeclObb", (ArrayList<IDInitObb>)idInitObb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;
		RESULT = "BOOL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT =null;
		RESULT = "REAL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),null));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),null)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),(ExprNode)expr));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),(ExprNode)expr)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IDInitObb> idListObb = new ArrayList<IDInitObb>(); idListObb.add(0, new IDInitObb(new IdVal(id),(Const)cost));RESULT = idListObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInitObb>)idInitObb).add(0, new IDInitObb(new IdVal(id),(Const)cost)); RESULT = idInitObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new Const("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new Const("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object paramDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeorvoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeorvoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeorvoid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunDecl("FunDecl", new IdVal(id),(ArrayList<ParDecl>)paramDecl,(String)typeorvoid,(Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body("bodyOp",(ArrayList<VarDecl>)varDeclList, (ArrayList<Stat>)statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>(); list.add((ParDecl)parDecl); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ParDecl>)nonEmptyList).add(0, (ParDecl)parDecl); RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= OUT Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOutOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              Object RESULT =null;
		RESULT = "VOID";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<VarDecl> list = new ArrayList<VarDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarDecl>)varDeclList).add(0, (VarDecl)varDecl); RESULT = varDeclList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Stat> statList = new ArrayList<Stat>(); statList.add(0, (Stat)stat);RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= StatList Stat 
            {
              Object RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Stat>)statList).add(0, (Stat)stat); RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Object RESULT =null;
		int ifValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((IfStat)ifVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Object RESULT =null;
		int forValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat( (ForStat)forVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat((ReadStat) readVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (WriteStat)writeVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (AssignStat)assignVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Object RESULT =null;
		int whileValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((WhileStat)whileVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int funCallValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funCallVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (FuncallNode)funCallVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= LetInstr 
            {
              Object RESULT =null;
		int letinstrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letinstrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object letinstr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((LetInstrNode)letinstr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= InitDoForStep 
            {
              Object RESULT =null;
		int initDoForStepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initDoForStepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object initDoForStep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((InitDoForStep)initDoForStep);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( "return",(ExprNode)exprVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN SEMI 
            {
              Object RESULT =null;
		RESULT = new Stat( "returnVoid",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IfStat ::= IF Expr THEN Body Else 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStat("IfStat", (ExprNode)expr, (Body)body, (ElseStat)els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InitDoForStep ::= INIT LPAR InitExpression RPAR DO LBRACK StatList RBRACK FOR LPAR CondExpression RPAR STEP LPAR LoopExpression RPAR SEMI 
            {
              Object RESULT =null;
		int initExpressioneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int initExpressioneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object initExpressione = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int condExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object condExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int loopExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int loopExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object loopExp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new InitDoForStep("InitDoForStep",(VarDecl)initExpressione, (ArrayList<Stat>)statList,(ExprNode)condExp,(ArrayList<ExprNode>)loopExp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitDoForStep",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CondExpression ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= (ExprNode)expr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondExpression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CondExpression ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CondExpression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LoopExpression ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> list = new ArrayList<ExprNode>(); list.add(0, (ExprNode)expr); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopExpression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LoopExpression ::= Expr SEMI LoopExpression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>)exprList).add(0, (ExprNode)expr); RESULT = exprList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopExpression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LoopExpression ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopExpression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InitExpression ::= Type IdInitList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarDecl("VarDecl",(String)type, (ArrayList<IDInit>)idInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InitExpression ::= VAR IdInitObblList 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarDecl("VarDeclObb", (ArrayList<IDInitObb>)idInitObb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InitExpression ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InitExpression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LetInstr ::= LET VarDeclList IN StatList END LET 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LetInstrNode("LetIn",(ArrayList<VarDecl>)varDeclList, (ArrayList<Stat>)statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LetInstr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Else ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseStat("ElseStat", (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStat ::= WHILE Expr LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStat("WhileState", (ExprNode)expr, (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStat("ForStat",new IdVal(id), new IntegerConst(val), new IntegerConst(val2), (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReadStat ::= IdList READ STRING_CONST 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReadStat ::= IdList READ 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IdList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdVal> list = new ArrayList<IdVal>(); list.add(new IdVal(id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IdVal>)idList).add(new IdVal(id)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStat ("WriteOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat("WritelnOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AssignStat ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStat("AssignOp",(ArrayList<IdVal>)idList,(ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FunCall ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id), (ArrayList<ExprNode>)exprlist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> list = new ArrayList<ExprNode>(); list.add(0, (ExprNode)expr); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>)exprList).add(0, (ExprNode)expr); RESULT = exprList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("ID", new IdVal(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("FuncallOp",  (FuncallNode)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= AssignStat 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AssignOp",  (AssignStat)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AddOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MinusOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MulOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DivOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AndOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("PowOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("StrConcatOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("OrOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("EqOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("UminusOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NotOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprNode("InparOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
