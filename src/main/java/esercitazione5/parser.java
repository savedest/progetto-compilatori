
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import nodi.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\006\005\000\002\006\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\007\000\002\012\005\000\002\012\007" +
    "\000\002\005\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\007\012\000\002\017\006\000\002\015" +
    "\002\000\002\015\003\000\002\022\003\000\002\022\005" +
    "\000\002\023\004\000\002\023\005\000\002\016\003\000" +
    "\002\016\003\000\002\020\002\000\002\020\004\000\002" +
    "\021\003\000\002\021\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\025\004\000\002\025\005\000" +
    "\002\025\004\000\002\025\002\000\002\026\007\000\002" +
    "\035\002\000\002\035\004\000\002\033\006\000\002\027" +
    "\012\000\002\030\005\000\002\030\004\000\002\024\003" +
    "\000\002\024\005\000\002\031\006\000\002\031\006\000" +
    "\002\032\005\000\002\034\006\000\002\034\005\000\002" +
    "\036\003\000\002\036\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\022\004\ufffd\010\013\011\012\012\007\013" +
    "\005\014\015\016\017\020\016\001\002\000\004\064\230" +
    "\001\002\000\006\036\ufff9\064\ufff9\001\002\000\004\002" +
    "\227\001\002\000\006\036\ufff8\064\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\012\012\007\013\005\014" +
    "\015\016\017\020\016\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\012\012\007\013\005\014\015\016\017\020" +
    "\016\001\002\000\006\036\ufff6\064\ufff6\001\002\000\004" +
    "\064\030\001\002\000\004\004\214\001\002\000\006\036" +
    "\ufff7\064\ufff7\001\002\000\004\064\020\001\002\000\006" +
    "\036\ufff5\064\ufff5\001\002\000\004\034\021\001\002\000" +
    "\020\011\012\012\007\013\005\014\015\016\017\021\026" +
    "\035\uffe5\001\002\000\004\064\030\001\002\000\004\035" +
    "\036\001\002\000\006\007\uffe3\035\uffe3\001\002\000\006" +
    "\007\034\035\uffe4\001\002\000\014\011\012\012\007\013" +
    "\005\014\015\016\017\001\002\000\004\064\030\001\002" +
    "\000\012\006\uffc8\007\uffc8\035\uffc8\041\uffc8\001\002\000" +
    "\010\006\032\007\uffe0\035\uffe0\001\002\000\004\064\033" +
    "\001\002\000\014\006\uffc7\007\uffc7\031\uffc7\035\uffc7\041" +
    "\uffc7\001\002\000\016\011\012\012\007\013\005\014\015" +
    "\016\017\021\026\001\002\000\006\007\uffe2\035\uffe2\001" +
    "\002\000\004\040\037\001\002\000\016\011\012\012\007" +
    "\013\005\014\015\016\017\017\042\001\002\000\004\036" +
    "\043\001\002\000\004\036\uffdf\001\002\000\004\036\uffde" +
    "\001\002\000\034\010\013\011\012\012\007\013\005\014" +
    "\015\016\017\022\uffdd\023\uffdd\026\uffdd\034\uffdd\037\uffdd" +
    "\042\uffdd\064\uffdd\001\002\000\024\002\uffe7\004\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\020\uffe7" +
    "\001\002\000\020\022\051\023\055\026\050\034\053\037" +
    "\uffd0\042\066\064\061\001\002\000\034\010\013\011\012" +
    "\012\007\013\005\014\015\016\017\022\uffdd\023\uffdd\026" +
    "\uffdd\034\uffdd\037\uffdd\042\uffdd\064\uffdd\001\002\000\020" +
    "\022\uffdc\023\uffdc\026\uffdc\034\uffdc\037\uffdc\042\uffdc\064" +
    "\uffdc\001\002\000\026\034\076\043\073\044\077\046\070" +
    "\063\104\064\102\065\074\066\101\067\071\070\103\001" +
    "\002\000\004\064\201\001\002\000\020\022\uffd4\023\uffd4" +
    "\026\uffd4\034\uffd4\037\uffd4\042\uffd4\064\uffd4\001\002\000" +
    "\026\034\076\043\073\044\077\046\070\063\104\064\102" +
    "\065\074\066\101\067\071\070\103\001\002\000\020\022" +
    "\uffd9\023\uffd9\026\uffd9\034\uffd9\037\uffd9\042\uffd9\064\uffd9" +
    "\001\002\000\026\034\076\043\073\044\077\046\070\063" +
    "\104\064\102\065\074\066\101\067\071\070\103\001\002" +
    "\000\004\005\166\001\002\000\020\022\051\023\055\026" +
    "\050\034\053\037\164\042\066\064\061\001\002\000\004" +
    "\005\163\001\002\000\012\006\uffc8\031\uffc8\034\142\041" +
    "\uffc8\001\002\000\010\006\032\031\157\041\160\001\002" +
    "\000\004\005\156\001\002\000\020\022\uffdb\023\uffdb\026" +
    "\uffdb\034\uffdb\037\uffdb\042\uffdb\064\uffdb\001\002\000\004" +
    "\005\155\001\002\000\030\005\075\034\076\043\073\044" +
    "\077\046\070\063\104\064\102\065\074\066\101\067\071" +
    "\070\103\001\002\000\020\022\uffd8\023\uffd8\026\uffd8\034" +
    "\uffd8\037\uffd8\042\uffd8\064\uffd8\001\002\000\026\034\076" +
    "\043\073\044\077\046\070\063\104\064\102\065\074\066" +
    "\101\067\071\070\103\001\002\000\050\005\uffbc\006\uffbc" +
    "\024\uffbc\030\uffbc\035\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002\000\040\005" +
    "\153\045\112\046\106\047\117\050\115\051\110\052\121" +
    "\053\113\054\120\055\122\056\114\057\116\060\111\061" +
    "\107\062\123\001\002\000\050\005\uffbf\006\uffbf\024\uffbf" +
    "\030\uffbf\035\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\001\002\000\050\005\uffbb\006" +
    "\uffbb\024\uffbb\030\uffbb\035\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\020" +
    "\022\uffd1\023\uffd1\026\uffd1\034\uffd1\037\uffd1\042\uffd1\064" +
    "\uffd1\001\002\000\026\034\076\043\073\044\077\046\070" +
    "\063\104\064\102\065\074\066\101\067\071\070\103\001" +
    "\002\000\050\005\uffbe\006\uffbe\024\uffbe\030\uffbe\035\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\001\002\000\050\005\uffb8\006\uffb8\024\uffb8\030" +
    "\uffb8\035\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\001\002\000\050\005\uffbd\006\uffbd" +
    "\024\uffbd\030\uffbd\035\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002\000\052\005" +
    "\uffb9\006\uffb9\024\uffb9\030\uffb9\034\142\035\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\001\002\000\050\005\uffba\006\uffba\024\uffba\030\uffba\035" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\001\002\000\026\034\076\043\073\044\077" +
    "\046\070\063\104\064\102\065\074\066\101\067\071\070" +
    "\103\001\002\000\050\005\uffa8\006\uffa8\024\uffa8\030\uffa8" +
    "\035\uffa8\045\112\046\106\047\117\050\115\051\110\052" +
    "\121\053\113\054\120\055\122\056\114\057\116\060\111" +
    "\061\uffa8\062\uffa8\001\002\000\026\034\076\043\073\044" +
    "\077\046\070\063\104\064\102\065\074\066\101\067\071" +
    "\070\103\001\002\000\026\034\076\043\073\044\077\046" +
    "\070\063\104\064\102\065\074\066\101\067\071\070\103" +
    "\001\002\000\026\034\076\043\073\044\077\046\070\063" +
    "\104\064\102\065\074\066\101\067\071\070\103\001\002" +
    "\000\026\034\076\043\073\044\077\046\070\063\104\064" +
    "\102\065\074\066\101\067\071\070\103\001\002\000\026" +
    "\034\076\043\073\044\077\046\070\063\104\064\102\065" +
    "\074\066\101\067\071\070\103\001\002\000\026\034\076" +
    "\043\073\044\077\046\070\063\104\064\102\065\074\066" +
    "\101\067\071\070\103\001\002\000\026\034\076\043\073" +
    "\044\077\046\070\063\104\064\102\065\074\066\101\067" +
    "\071\070\103\001\002\000\026\034\076\043\073\044\077" +
    "\046\070\063\104\064\102\065\074\066\101\067\071\070" +
    "\103\001\002\000\026\034\076\043\073\044\077\046\070" +
    "\063\104\064\102\065\074\066\101\067\071\070\103\001" +
    "\002\000\026\034\076\043\073\044\077\046\070\063\104" +
    "\064\102\065\074\066\101\067\071\070\103\001\002\000" +
    "\026\034\076\043\073\044\077\046\070\063\104\064\102" +
    "\065\074\066\101\067\071\070\103\001\002\000\026\034" +
    "\076\043\073\044\077\046\070\063\104\064\102\065\074" +
    "\066\101\067\071\070\103\001\002\000\026\034\076\043" +
    "\073\044\077\046\070\063\104\064\102\065\074\066\101" +
    "\067\071\070\103\001\002\000\026\034\076\043\073\044" +
    "\077\046\070\063\104\064\102\065\074\066\101\067\071" +
    "\070\103\001\002\000\050\005\uffb0\006\uffb0\024\uffb0\030" +
    "\uffb0\035\uffb0\045\112\046\106\047\117\050\115\051\110" +
    "\052\121\053\113\054\120\055\122\056\114\057\116\060" +
    "\111\061\107\062\uffb0\001\002\000\050\005\uffad\006\uffad" +
    "\024\uffad\030\uffad\035\uffad\045\112\046\106\047\117\050" +
    "\115\051\110\052\121\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\001\002\000\050\005" +
    "\uffb1\006\uffb1\024\uffb1\030\uffb1\035\uffb1\045\112\046\106" +
    "\047\117\050\115\051\110\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002" +
    "\000\050\005\uffaa\006\uffaa\024\uffaa\030\uffaa\035\uffaa\045" +
    "\112\046\106\047\117\050\115\051\110\052\121\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\001\002\000\050\005\uffb5\006\uffb5\024\uffb5\030\uffb5" +
    "\035\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\110\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\001\002\000\050\005\uffaf\006\uffaf\024" +
    "\uffaf\030\uffaf\035\uffaf\045\112\046\106\047\117\050\115" +
    "\051\110\052\121\053\113\054\120\055\122\056\114\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\001\002\000\050\005\uffb4" +
    "\006\uffb4\024\uffb4\030\uffb4\035\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\110\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000" +
    "\050\005\uffac\006\uffac\024\uffac\030\uffac\035\uffac\045\112" +
    "\046\106\047\117\050\115\051\110\052\121\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\001\002\000\050\005\uffab\006\uffab\024\uffab\030\uffab\035" +
    "\uffab\045\112\046\106\047\117\050\115\051\110\052\121" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\001\002\000\050\005\uffb7\006\uffb7\024\uffb7" +
    "\030\uffb7\035\uffb7\045\uffb7\046\uffb7\047\117\050\115\051" +
    "\110\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\001\002\000\050\005\uffae\006" +
    "\uffae\024\uffae\030\uffae\035\uffae\045\112\046\106\047\117" +
    "\050\115\051\110\052\121\053\113\054\120\055\122\056" +
    "\114\057\uffae\060\uffae\061\uffae\062\uffae\001\002\000\050" +
    "\005\uffb2\006\uffb2\024\uffb2\030\uffb2\035\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\110\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\001" +
    "\002\000\050\005\uffb3\006\uffb3\024\uffb3\030\uffb3\035\uffb3" +
    "\045\112\046\106\047\117\050\115\051\110\052\121\053" +
    "\113\054\120\055\122\056\114\057\116\060\111\061\uffb3" +
    "\062\uffb3\001\002\000\050\005\uffb6\006\uffb6\024\uffb6\030" +
    "\uffb6\035\uffb6\045\uffb6\046\uffb6\047\117\050\115\051\110" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\001\002\000\030\034\076\035\145" +
    "\043\073\044\077\046\070\063\104\064\102\065\074\066" +
    "\101\067\071\070\103\001\002\000\044\005\uffc1\006\147" +
    "\035\uffc1\045\112\046\106\047\117\050\115\051\110\052" +
    "\121\053\113\054\120\055\122\056\114\057\116\060\111" +
    "\061\107\062\123\001\002\000\004\035\146\001\002\000" +
    "\050\005\uffc2\006\uffc2\024\uffc2\030\uffc2\035\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\001\002\000\050\005\uffc3\006\uffc3\024\uffc3\030\uffc3\035" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\001\002\000\026\034\076\043\073\044\077" +
    "\046\070\063\104\064\102\065\074\066\101\067\071\070" +
    "\103\001\002\000\006\005\uffc0\035\uffc0\001\002\000\040" +
    "\035\152\045\112\046\106\047\117\050\115\051\110\052" +
    "\121\053\113\054\120\055\122\056\114\057\116\060\111" +
    "\061\107\062\123\001\002\000\050\005\uffa7\006\uffa7\024" +
    "\uffa7\030\uffa7\035\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\001\002\000\020\022\uffd2" +
    "\023\uffd2\026\uffd2\034\uffd2\037\uffd2\042\uffd2\064\uffd2\001" +
    "\002\000\050\005\uffa9\006\uffa9\024\uffa9\030\uffa9\035\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\001\002\000\020\022\uffd7\023\uffd7\026\uffd7\034" +
    "\uffd7\037\uffd7\042\uffd7\064\uffd7\001\002\000\020\022\uffd6" +
    "\023\uffd6\026\uffd6\034\uffd6\037\uffd6\042\uffd6\064\uffd6\001" +
    "\002\000\006\005\uffc9\065\162\001\002\000\026\034\076" +
    "\043\073\044\077\046\070\063\104\064\102\065\074\066" +
    "\101\067\071\070\103\001\002\000\004\005\uffc4\001\002" +
    "\000\004\005\uffca\001\002\000\020\022\uffd3\023\uffd3\026" +
    "\uffd3\034\uffd3\037\uffd3\042\uffd3\064\uffd3\001\002\000\044" +
    "\002\uffe6\004\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\034\uffe6\037\uffe6\042\uffe6\064\uffe6\001\002\000\020\022" +
    "\uffda\023\uffda\026\uffda\034\uffda\037\uffda\042\uffda\064\uffda" +
    "\001\002\000\020\022\uffd5\023\uffd5\026\uffd5\034\uffd5\037" +
    "\uffd5\042\uffd5\064\uffd5\001\002\000\040\024\170\045\112" +
    "\046\106\047\117\050\115\051\110\052\121\053\113\054" +
    "\120\055\122\056\114\057\116\060\111\061\107\062\123" +
    "\001\002\000\004\036\043\001\002\000\022\022\uffce\023" +
    "\uffce\025\172\026\uffce\034\uffce\037\uffce\042\uffce\064\uffce" +
    "\001\002\000\004\036\043\001\002\000\020\022\uffcf\023" +
    "\uffcf\026\uffcf\034\uffcf\037\uffcf\042\uffcf\064\uffcf\001\002" +
    "\000\020\022\uffcd\023\uffcd\026\uffcd\034\uffcd\037\uffcd\042" +
    "\uffcd\064\uffcd\001\002\000\004\035\176\001\002\000\006" +
    "\032\177\033\200\001\002\000\004\005\uffc6\001\002\000" +
    "\004\005\uffc5\001\002\000\004\041\202\001\002\000\004" +
    "\066\203\001\002\000\004\027\204\001\002\000\004\066" +
    "\205\001\002\000\004\030\206\001\002\000\004\036\043" +
    "\001\002\000\020\022\uffcb\023\uffcb\026\uffcb\034\uffcb\037" +
    "\uffcb\042\uffcb\064\uffcb\001\002\000\040\030\211\045\112" +
    "\046\106\047\117\050\115\051\110\052\121\053\113\054" +
    "\120\055\122\056\114\057\116\060\111\061\107\062\123" +
    "\001\002\000\004\036\043\001\002\000\020\022\uffcc\023" +
    "\uffcc\026\uffcc\034\uffcc\037\uffcc\042\uffcc\064\uffcc\001\002" +
    "\000\010\006\032\007\uffe1\035\uffe1\001\002\000\004\020" +
    "\016\001\002\000\022\002\ufffd\010\013\011\012\012\007" +
    "\013\005\014\015\016\017\020\016\001\002\000\004\002" +
    "\001\001\002\000\022\002\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\016\ufffc\020\ufffc\001\002\000\004\005" +
    "\224\001\002\000\006\006\032\041\222\001\002\000\026" +
    "\034\076\043\073\044\077\046\070\063\104\064\102\065" +
    "\074\066\101\067\071\070\103\001\002\000\004\005\uffee" +
    "\001\002\000\042\002\ufffa\004\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\026\ufffa\034\ufffa\037\ufffa\042\ufffa\064\ufffa\001\002\000" +
    "\006\002\uffff\004\uffff\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002\000\004\002\000\001\002\000\010\005\ufff4\006" +
    "\ufff4\041\237\001\002\000\006\005\233\006\232\001\002" +
    "\000\004\064\234\001\002\000\042\002\ufffb\004\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\020\ufffb" +
    "\022\ufffb\023\ufffb\026\ufffb\034\ufffb\037\ufffb\042\ufffb\064" +
    "\ufffb\001\002\000\010\005\ufff3\006\ufff3\041\235\001\002" +
    "\000\026\034\076\043\073\044\077\046\070\063\104\064" +
    "\102\065\074\066\101\067\071\070\103\001\002\000\042" +
    "\005\ufff1\006\ufff1\045\112\046\106\047\117\050\115\051" +
    "\110\052\121\053\113\054\120\055\122\056\114\057\116" +
    "\060\111\061\107\062\123\001\002\000\026\034\076\043" +
    "\073\044\077\046\070\063\104\064\102\065\074\066\101" +
    "\067\071\070\103\001\002\000\042\005\ufff2\006\ufff2\045" +
    "\112\046\106\047\117\050\115\051\110\052\121\053\113" +
    "\054\120\055\122\056\114\057\116\060\111\061\107\062" +
    "\123\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\014\002\005\003\013\006\010\007\007\010" +
    "\003\001\001\000\004\011\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\225\006" +
    "\010\007\007\010\003\001\001\000\012\003\224\006\010" +
    "\007\007\010\003\001\001\000\002\001\001\000\006\005" +
    "\217\024\220\001\001\000\004\004\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\021\015\022\022\024\023\023\001\001" +
    "\000\004\024\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\026\001\001\000\004" +
    "\024\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\021\023\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\040\016\037\001\001\000\004\017\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\045\010\003\020" +
    "\044\001\001\000\002\001\001\000\026\021\056\024\061" +
    "\025\063\026\053\027\066\030\064\031\062\032\055\033" +
    "\051\034\057\001\001\000\010\006\045\010\003\020\046" +
    "\001\001\000\002\001\001\000\006\013\207\034\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\142" +
    "\034\077\036\174\001\001\000\002\001\001\000\006\013" +
    "\166\034\077\001\001\000\002\001\001\000\024\024\061" +
    "\025\164\026\053\027\066\030\064\031\062\032\055\033" +
    "\051\034\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\071\034\077\001\001\000\002" +
    "\001\001\000\006\013\153\034\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\150\034\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\104\034\077\001" +
    "\001\000\002\001\001\000\006\013\140\034\077\001\001" +
    "\000\006\013\137\034\077\001\001\000\006\013\136\034" +
    "\077\001\001\000\006\013\135\034\077\001\001\000\006" +
    "\013\134\034\077\001\001\000\006\013\133\034\077\001" +
    "\001\000\006\013\132\034\077\001\001\000\006\013\131" +
    "\034\077\001\001\000\006\013\130\034\077\001\001\000" +
    "\006\013\127\034\077\001\001\000\006\013\126\034\077" +
    "\001\001\000\006\013\125\034\077\001\001\000\006\013" +
    "\124\034\077\001\001\000\006\013\123\034\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\142\034\077\036\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\142\034\077\036\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\142\034\077" +
    "\036\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\170\001\001\000" +
    "\004\035\172\001\001\000\004\017\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\216\001\001\000\012" +
    "\003\215\006\010\007\007\010\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\142\034\077\036\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\235\034\077\001\001\000\002\001\001\000\006\013" +
    "\237\034\077\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramRoot("Program",(ArrayList<Node>)declList,(MainFunDecl)mainFun,(ArrayList<Node>)declList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (VarDecl)varDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>)declList).add(0, (FunDecl)funDecl); RESULT = declList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<Node> list = new ArrayList<Node>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              Object RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MainFunDecl("MainFunDecl",(FunDecl)funDecl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("VarDecl",(String)type, (ArrayList<IDInit>)idInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR MultiIdInitObblList SEMI 
            {
              Object RESULT =null;
		int assignValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDecl("MultiObb",(MultiObb)assignVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = "INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;
		RESULT = "BOOL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT =null;
		RESULT = "REAL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),null));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),null)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDInit> idList = new ArrayList<IDInit>(); idList.add(0, new IDInit(new IdVal(id),(ExprNode)expr));RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInit>)idList).add(0, new IDInit(new IdVal(id),(ExprNode)expr)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IDInitObb> idListObb = new ArrayList<IDInitObb>(); idListObb.add(0, new IDInitObb(new IdVal(id),(Const)cost));RESULT = idListObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idInitObbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idInitObb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cost = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IDInitObb>)idInitObb).add(0, new IDInitObb(new IdVal(id),(Const)cost)); RESULT = idInitObb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MultiIdInitObblList ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiObb("MultiObb",(ArrayList<IdVal>)idList,(ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiIdInitObblList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new Const("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new Const("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object paramDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeorvoidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeorvoidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object typeorvoid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunDecl("FunDecl", new IdVal(id),(ArrayList<ParDecl>)paramDecl,(String)typeorvoid,(Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body("bodyOp",(ArrayList<VarDecl>)varDeclList, (ArrayList<Stat>)statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDecl> list = new ArrayList<ParDecl>(); list.add((ParDecl)parDecl); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              Object RESULT =null;
		int nonEmptyListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nonEmptyList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ParDecl>)nonEmptyList).add(0, (ParDecl)parDecl); RESULT = nonEmptyList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= OUT Type IdList 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOutOP",(String)type,(ArrayList<IdVal>)idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= VOID 
            {
              Object RESULT =null;
		RESULT = "VOID";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              Object RESULT =null;
		 ArrayList<VarDecl> list = new ArrayList<VarDecl>();RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarDecl>)varDeclList).add(0, (VarDecl)varDecl); RESULT = varDeclList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Stat> statList = new ArrayList<Stat>(); statList.add(0, (Stat)stat);RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= StatList Stat 
            {
              Object RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Stat>)statList).add(0, (Stat)stat); RESULT = statList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IfStat 
            {
              Object RESULT =null;
		int ifValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((IfStat)ifVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ForStat 
            {
              Object RESULT =null;
		int forValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object forVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat( (ForStat)forVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat((ReadStat) readVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (WriteStat)writeVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (AssignStat)assignVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WhileStat 
            {
              Object RESULT =null;
		int whileValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object whileVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stat((WhileStat)whileVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int funCallValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funCallVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( (FuncallNode)funCallVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stat( "return",(ExprNode)exprVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN SEMI 
            {
              Object RESULT =null;
		RESULT = new Stat( "returnVoid",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IfStat ::= IF Expr THEN Body Else 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStat("IfStat", (ExprNode)expr, (Body)body, (ElseStat)els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseStat("ElseStat", (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WhileStat ::= WHILE Expr LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStat("WhileState", (ExprNode)expr, (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStat("ForStat",new IdVal(id), new IntegerConst(val), new IntegerConst(val2), (Body)body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ STRING_CONST 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ReadStat ::= IdList READ 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStat("ReadOp",(ArrayList<IdVal>) idList, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdVal> list = new ArrayList<IdVal>(); list.add(new IdVal(id)); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IdVal>)idList).add(new IdVal(id)); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStat ("WriteOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              Object RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat("WritelnOp",(ArrayList<ExprNode>) exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AssignStat ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStat("AssignOp",(ArrayList<IdVal>)idList,(ArrayList<ExprNode>)exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id), (ArrayList<ExprNode>)exprlist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncallNode("FuncallOp", new IdVal(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> list = new ArrayList<ExprNode>(); list.add(0, (ExprNode)expr); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>)exprList).add(0, (ExprNode)expr); RESULT = exprList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("TRUE", new BoolConst(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ExprNode("FALSE", new BoolConst(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("INTEGER_CONST", new IntegerConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float val = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("REAL_CONST", new RealConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("STRING_CONST", new StringConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("CHAR_CONST", new CharConst(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("ID", new IdVal(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("FuncallOp",  (FuncallNode)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AddOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MinusOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MulOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DivOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AndOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("PowOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("StrConcatOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("OrOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LtOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("EqOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NeOp", (Node)e1, (Node)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("UminusOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NotOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprNode("InparOp", (Node)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
